# AUTOGENERATED! DO NOT EDIT! File to edit: data.ipynb (unless otherwise specified).

__all__ = ['FormatImg', 'format', 'preprocess_tfrecord', 'preprocess_file', 'preprocess_raw']

# Cell
class FormatImg:
    def __call__(self, X, y):
        import numpy as np
        from fiducial_detect.data import Normalize

        X, _ = Normalize((0, 255), (-1, 1))(X, None)
        y, _ = Normalize((0, 255), ( 0, 4))(y, None)
        y = np.digitize(y, np.linspace(0.5, 3.5, 4))
        return X, y

# Cell
def format(img, mask):
    import tensorflow as tf

    img, mask = [tf.io.decode_png(X) for X in [img, mask]]
    img, mask = [tf.cast(X, tf.float32) for X in [img, mask]]
    img  /= 255; img  *= 2; img -= 1
    mask /= 255; mask *= 4; mask = tf.round(mask); mask = tf.cast(mask, tf.int64)
    return img, mask

# Cell
def preprocess_tfrecord(serialized):
    import tensorflow as tf

    features = {
        'img':  tf.io.FixedLenFeature([], tf.string),
        'mask': tf.io.FixedLenFeature([], tf.string),
    }
    example = tf.io.parse_single_example(serialized, features)
    return format(example['img'], example['mask'])

# Cell
def preprocess_file(file_mask):
    import tensorflow as tf

    file_img = tf.strings.regex_replace(file_mask, '_mask', '')
    img, mask = [tf.io.read_file(file) for file in [file_img, file_mask]]
    return format(img, mask)

# Cell
def preprocess_raw(file_raw):
    import tensorflow as tf

    img = tf.io.read_file(file_raw)
    img = tf.io.decode_raw(img, tf.float32)
    return tf.reshape(img, (1, 384, 512, 1))